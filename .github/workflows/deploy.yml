name: Create and Configure GitHub Repo

env:
  ORGANIZATION_NAME: 'chvi-devops'
  TEAM_NAME: 'TeamA'
  WORKSPACE_REPO_NAME: 'workspace-repo'
  
on:
  workflow_dispatch:
    inputs:
      # repoName:
      #   description: 'Repository Name'
      #   required: true
      # description:
      #   description: 'Repository Description'
      #   required: true
      workspaceName:
        description: 'TFC Workspace Name'
        required: true
      workspaceTagsName:
        description: 'Workspace tags name'
        required: true
      workspaceVariableSetName:
        description: 'Workspace Variable Set Name'
        required: true
      workspaceProjectName:
        description: 'Workspace Project Name'
        required: true
jobs:
  # create-repo:
  #   name: "Deploy New Repositories"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check if Repository Already Exists
  #     id: check_repo
  #     run: |
  #       REPO_NAME="${{ github.event.inputs.repoName }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
  #       GH_PAT="${{ secrets.GH_PAT }}"
          
  #       response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_PAT" \
  #         "https://api.github.com/repos/$ORG_NAME/$REPO_NAME")
  #       if [ "$response" == "200" ]; then
  #         echo "REPO_EXISTS=true" >> "$GITHUB_OUTPUT"
  #       else
  #         echo "REPO_EXISTS=false" >> "$GITHUB_OUTPUT"
  #       fi
  #     shell: bash

  #   - name: Stop Workflow If Repository Exist
  #     if: steps.check_repo.outputs.REPO_EXISTS == 'true'
  #     run: |
  #       echo "The repository already exist. Stopping the workflow."
  #       exit 1

  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Create Repository
  #     id: create_repo
  #     run: |
  #       REPO_NAME="${{ github.event.inputs.repoName }}"
  #       DESCRIPTION="${{ github.event.inputs.description }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
  #       GH_PAT="${{ secrets.GH_PAT }}"
        
  #       # Create the repository using the GitHub API and set it as internal
  #       curl -X POST -H "Authorization: token $GH_PAT" \
  #         https://api.github.com/orgs/$ORG_NAME/repos -d "{\"name\":\"$REPO_NAME\",\"description\":\"$DESCRIPTION\"}"
  #       # https://api.github.com/orgs/$ORG_NAME/repos -d "{\"name\":\"$REPO_NAME\",\"description\":\"$DESCRIPTION\",\"private\":true}"
  #       echo "REPOSITORY_NAME=${{ github.event.inputs.repoName }}" >> "$GITHUB_ENV"
  #     shell: bash
    
  #   - name: Copy Template Files
  #     run: |
  #       REPO_NAME="${{ env.REPOSITORY_NAME }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
    
  #       # Create a directory with the name of new repository created
  #       mkdir $REPO_NAME

  #       # Using cp command to copy all files and folders from from the 'templates' folder to the new repository folder
  #       cp -a templates/. ${{ github.workspace }}/$REPO_NAME/
  #     shell: bash


  #   - name: Add, Commit, and Push README.md
  #     run: |
  #       GH_PAT="${{ secrets.GH_PAT }}"
  #       REPO_NAME="${{ env.REPOSITORY_NAME }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
  #       cd ${{ github.workspace }}/$REPO_NAME
  #       git config --global user.email "Demouser@gmail.com"
  #       git config --global user.name "DemoUser"
  #       git init
  #       git branch -M main
  #       git add README.md
  #       git commit -m "Added README.md"
  #       git remote add origin "https://$GH_PAT@github.com/$ORG_NAME/$REPO_NAME.git"
  #       git push origin main
  #       git branch development
  #       git checkout development
  #       git add .
  #       git commit -m "Added Initial files."
  #       git push origin development

  #   - name: Configure Branch Protection
  #     run: |
  #       REPO_NAME="${{ env.REPOSITORY_NAME }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
  #       GH_PAT="${{ secrets.GH_PAT }}"
        
  #       # Enable branch protection for Main branch
  #       curl -X PUT -H "Authorization: token $GH_PAT" \
  #         "https://api.github.com/repos/$ORG_NAME/$REPO_NAME/branches/main/protection" -d '{
  #           "required_status_checks": null,
  #           "enforce_admins": null,
  #           "required_pull_request_reviews": {
  #             "dismiss_stale_reviews": false,
  #             "require_code_owner_reviews": false,
  #             "required_approving_review_count": 1
  #           },
  #           "restrictions": null,
  #           "required_linear_history": false,
  #           "allow_force_pushes": false,
  #           "allow_deletions": false
  #         }'
        
  #       # Enable branch protection for Development branch
  #       curl -X PUT -H "Authorization: token $GH_PAT" \
  #         "https://api.github.com/repos/$ORG_NAME/$REPO_NAME/branches/development/protection" -d '{
  #           "required_status_checks": null,
  #           "enforce_admins": null,
  #           "required_pull_request_reviews": {
  #             "dismiss_stale_reviews": false,
  #             "require_code_owner_reviews": false,
  #             "required_approving_review_count": 1
  #           },
  #           "restrictions": null,
  #           "required_linear_history": false,
  #           "allow_force_pushes": false,
  #           "allow_deletions": false
  #         }'
  #     shell: bash
  
  #   - name: Add TeamA as a Reviewer Team
  #     run: |
  #       REPO_NAME="${{ env.REPOSITORY_NAME }}"
  #       ORG_NAME="${{ env.ORGANIZATION_NAME }}"
  #       GH_PAT="${{ secrets.GH_PAT }}"
  #       GH_PAT="${{ secrets.GH_PAT }}"
  #       TEAM_SLUG_NAME=$(echo "${{ env.TEAM_NAME }}" | tr '[:upper:]' '[:lower:]')
  #       # Add TeamA as a possible reviewer team to the repository
  #       curl -X PUT -H "Authorization: token $GH_PAT" \
  #       "https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_SLUG_NAME/repos/$ORG_NAME/$REPO_NAME" -d '{
  #       "permission": "triage"
  #       }'
  #     shell: bash

  create-workspace:
    # needs: create-repo
    name: "Create new tfc-workspace"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Clone the worskspace repo
      run: |
        GH_PAT="${{ secrets.GH_PAT }}"
        REPO_NAME="${{ env.WORKSPACE_REPO_NAME }}"
        ORG_NAME="${{ env.ORGANIZATION_NAME }}"
        WORKSPACE_NAME="${{ github.event.inputs.workspaceName }}"
        git clone https://$GH_PAT@github.com/$ORG_NAME/$REPO_NAME.git
        cd ${{ github.workspace }}/$REPO_NAME
        git config --global user.email "Demouser@gmail.com"
        git config --global user.name "DemoUser"
        git checkout development
        git branch feat-$WORKSPACE_NAME
        git checkout feat-$WORKSPACE_NAME
        
    - name: Manipulate and Update Workspace Object
      run: |
        WORKSPACE_NAME="${{ github.event.inputs.workspaceName }}"
        VARIABLE_SET_NAME="${{ github.event.inputs.workspaceVariableSetName }}"
        TAG_NAMES='${{ github.event.inputs.workspaceTagsName }}'
        PROJECT_NAME="${{ github.event.inputs.workspaceProjectName }}"
        REPO_NAME="${{ env.WORKSPACE_REPO_NAME }}"

        cd ${{ github.workspace }}/$REPO_NAME

        sed -i "s|abc_workspace|$WORKSPACE_NAME|g" ${{ github.workspace }}/template-workspaces.tfvars
        sed -i "s|abc_variable_set|$VARIABLE_SET_NAME|g" ${{ github.workspace }}/template-workspaces.tfvars
        sed -i "s|abc_project_name|$PROJECT_NAME|g" ${{ github.workspace }}/template-workspaces.tfvars
        sed -i "s|tags|$TAG_NAMES|g" ${{ github.workspace }}/template-workspaces.tfvars

        UPDATED_OBJECT=$(cat "${{ github.workspace }}/template-workspaces.tfvars")
        
        awk '/workspaces = {/!b;n;:a;$!N;/\n}/!ba;s/\n}// && !f {print ""; f=1} 1' workspaces.tfvars > workspaces.tfvars.tmp
        mv workspaces.tfvars.tmp workspaces.tfvars
        sed -i '/workspaces = {/!b;n;:a;$!N;/\n}/!ba;s/\n}//' workspaces.tfvars
        echo "$UPDATED_OBJECT" >> workspace.tfvars
        echo "}" >> workspaces.tfvars
        terraform fmt --recursive

        cat workspaces.tfvars

      shell: bash